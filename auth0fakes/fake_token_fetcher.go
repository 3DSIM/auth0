// Code generated by counterfeiter. DO NOT EDIT.
package auth0fakes

import (
	"sync"

	"github.com/3dsim/auth0"
)

type FakeTokenFetcher struct {
	NewTokenStub        func(audience string) (string, error)
	newTokenMutex       sync.RWMutex
	newTokenArgsForCall []struct {
		audience string
	}
	newTokenReturns struct {
		result1 string
		result2 error
	}
	newTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	TokenStub        func(audience string) (string, error)
	tokenMutex       sync.RWMutex
	tokenArgsForCall []struct {
		audience string
	}
	tokenReturns struct {
		result1 string
		result2 error
	}
	tokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenFetcher) NewToken(audience string) (string, error) {
	fake.newTokenMutex.Lock()
	ret, specificReturn := fake.newTokenReturnsOnCall[len(fake.newTokenArgsForCall)]
	fake.newTokenArgsForCall = append(fake.newTokenArgsForCall, struct {
		audience string
	}{audience})
	fake.recordInvocation("NewToken", []interface{}{audience})
	fake.newTokenMutex.Unlock()
	if fake.NewTokenStub != nil {
		return fake.NewTokenStub(audience)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.newTokenReturns.result1, fake.newTokenReturns.result2
}

func (fake *FakeTokenFetcher) NewTokenCallCount() int {
	fake.newTokenMutex.RLock()
	defer fake.newTokenMutex.RUnlock()
	return len(fake.newTokenArgsForCall)
}

func (fake *FakeTokenFetcher) NewTokenArgsForCall(i int) string {
	fake.newTokenMutex.RLock()
	defer fake.newTokenMutex.RUnlock()
	return fake.newTokenArgsForCall[i].audience
}

func (fake *FakeTokenFetcher) NewTokenReturns(result1 string, result2 error) {
	fake.NewTokenStub = nil
	fake.newTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) NewTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.NewTokenStub = nil
	if fake.newTokenReturnsOnCall == nil {
		fake.newTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.newTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) Token(audience string) (string, error) {
	fake.tokenMutex.Lock()
	ret, specificReturn := fake.tokenReturnsOnCall[len(fake.tokenArgsForCall)]
	fake.tokenArgsForCall = append(fake.tokenArgsForCall, struct {
		audience string
	}{audience})
	fake.recordInvocation("Token", []interface{}{audience})
	fake.tokenMutex.Unlock()
	if fake.TokenStub != nil {
		return fake.TokenStub(audience)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tokenReturns.result1, fake.tokenReturns.result2
}

func (fake *FakeTokenFetcher) TokenCallCount() int {
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	return len(fake.tokenArgsForCall)
}

func (fake *FakeTokenFetcher) TokenArgsForCall(i int) string {
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	return fake.tokenArgsForCall[i].audience
}

func (fake *FakeTokenFetcher) TokenReturns(result1 string, result2 error) {
	fake.TokenStub = nil
	fake.tokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) TokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.TokenStub = nil
	if fake.tokenReturnsOnCall == nil {
		fake.tokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.tokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newTokenMutex.RLock()
	defer fake.newTokenMutex.RUnlock()
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth0.TokenFetcher = new(FakeTokenFetcher)
